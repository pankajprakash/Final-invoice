import React, { useState, useEffect } from "react";
import { useForm, Controller } from "react-hook-form";
import Datepicker from './Datepicker';
import { Container, Row, Col } from 'reactstrap';
import DatePicker from "react-datepicker";
import "react-datepicker/dist/react-datepicker.css";
import { useSelector, useDispatch } from 'react-redux'
import { postInvoiceData } from './../Redux/Action/FormAction'
import { CompanyData } from './../Redux/Action/ToCompanies'
import { postLoginData } from "./../../src/Redux/Action/LoginAction";
import {
  BrowserRouter as Router,
  Switch,
  Route,
  Link,
  Redirect
} from "react-router-dom";
import Select from 'react-select';

import { productData } from './../Redux/Action/ProductAction'
import { getAllByText } from "@testing-library/dom";

const Form = ({ history, location }) => {



  const [state1, setstate1] = useState({
    "from": '',
    "to": '',
    "createdBy": '',
    "items": {
      "productName": '',
      "quantity": '',
      "description": '',
      "unitPrice": '',
      "total": ''
    },
    "dueDate": '',
    "status": ''
  })

  const [addMore, setAddmore] = useState({
    items: [
      {
        "productName": "",
        "quantity": "",
        "description": "",
        "unitPrice": "",
        "total": "",
      },
    ],
  });

  const addItems = (e) => {

    // setAddmore((prevState) => ({

    //   //here hName was newCon
    //   items: [
    //      ...prevState.items,
    //     {
    //       "productName":"",
    //     "quantity": "",
    //     "description": "",
    //     "unitPrice": "",
    //     "total": "",
    //     },
    //   ],
    // }));



    setAddmore({
      items: [
        {
          "productName": "",
          "quantity": "",
          "description": "",
          "unitPrice": "",
          "total": "",
        },
      ],
    })


  };





  const state = useSelector(state => state)
  const dispatch = useDispatch()
  const { control, register, handleSubmit, formState: { errors } } = useForm();


  useEffect(() => {
    dispatch(CompanyData());
    // dispatch(postLoginData())
    dispatch(productData())
    console.log(location, "user reg data in form")
    console.log(selectedOrg, "sel org")
    console.log(selectedOrg, "gggggggggggggggggggggggggggggggggggggggggggggg")
    // console.log(selOrg,"local s data")
  }, [])
  // const onSubmit = (invoicedata) => dispatch(postInvoiceData


  //   (invoicedata));
  const getValues = (invoicedata) => {
    setstate1({
      "from": invoicedata.from,
      "to": invoicedata.to,
      "createdBy": invoicedata.createdBy,
      "items": {
        "productName": invoicedata.ProductName,
        "quantity": invoicedata.quantity,
        "description": invoicedata.Description,
        "unitPrice": invoicedata.unitPrice,
        "total": invoicedata.total
      },
      "dueDate": invoicedata.dueDate,
      "status": invoicedata.status
    })

    setTimeout(() => {

    }, 500);


  }


  const onSubmit = (invoicedata) => {
    
  // const alldata={...invoicedata,
  // productName:pro.map(e => e.label)}
  //   //  getValues(invoicedata)
  //   dispatch(postInvoiceData(alldata, history))
    console.log(invoicedata, "invouice data itemsss")


    // setTimeout(() => {

    //   history.push("/download")
    // }, 1000);
    // 
    // console.log(object)

    // console.log("dispatched data",state.companyId.to);

  }


  const logoutFun = () => {
    localStorage.clear();
    history.push("/");
  }

  // for organisation
  const selectedOrg = JSON.parse(localStorage.getItem("selected_company"))

  const [pro, setProducts] = useState([])
  const [tax, setTax] = useState({
    tax: '',
    category: ''
  })
  //used new use selector for for product data
  const productsData = useSelector(state => state.products.Product)

  // 

  // const getTax = (e) => {
  //   console.log(e, "tax in selelct")
  //   setTax({
  //     "tax": e.tax,
  //     "category": e.category
  //   })
  // }



  const mappedProducts = productsData.map((e) =>

  ({
    label: e.productName,
    value: e.id,
    color: '#00B8D9'
  })
  )
console.log(mappedProducts)




  return (

    <>
      <Container>

        <div className="outer">

          {JSON.stringify(pro)}
          <form onSubmit={handleSubmit(onSubmit)} className="form-data">


            <Row>
              <div className="btn-head1">
                <div>
                  <h5 className="top-head"><b >INVOICE MANAGEMENT</b></h5>
                  {productsData.map((e) => (e.productName)

                  )}
                </div>

                <div className="log-btn">
                  <button className="addnew-btn" onClick={logoutFun}><i class="far fa-plus-square"> logout </i></button>
                </div>
              </div>
            </Row>



            <Row className="firstRow">
              <Col md="4">
                <label for="status">From</label>
                <select {...register("from")} className="select1">

                  {selectedOrg.map((e) => (
                    <option value={e.id}>{e.companyName}</option>
                  ))}


                </select>

              </Col>
              <Col md="4">
                <label for="Created By">Created By </label>
                <input
                  type="text"
                  {...register('createdBy', {
                    required: true
                  })}
                />

                <p className="para">
                  {errors.createdBy && "this field can't be empty*"}
                </p>
              </Col>
              <Col md="4">
                <label for="To">To</label>
                <select {...register("to", { required: true })} className="select">

                  {state.companyId.to.map((e) =>
                    <option value={e.id}>{e.name}</option>
                  )}

                </select>
                <p className="para">
                  {errors.to && "this field can't be empty*"}
                </p>


              </Col>
            </Row>

            <Row className="firstRow">
              <Col md="4">
                <label for="Notes">Notes</label>
                <input
                  type="text"
                  {...register('Notes', {

                  })}
                />
                <p className="para">
                  {errors.Notes && "this field can't be empty*"}
                </p>
              </Col>




              <Col md="3  ">
                <label for="dueDate">Due Date</label>
                {/* <Controller name="due_date" control={control} defaultValue={null}
                  render={
                    ({onChange, value})=><DatePicker   onChange={onChange} selected={value}
                    
                    placeholderText="select date" />

                  }
                  />  */}


                {<Controller name="dueDate" control={control} defaultValue={null}
                  render={
                    (p) => {
                      console.log(`onChange, value`, p.fields)
                      return <DatePicker selected={p.field.value}
                        placeholderText="select date   " onChange={p.field.onChange} />

                    }

                  }
                />
                }


              </Col>

              <Col md="4">
                <label for="status">Status</label>
                <select {...register("status", { required: true })} className="select">
                  <option value="pending">Pending</option>
                  <option value="underReview">Under Review</option>
                  <option value="approved">Approved</option>
                </select>

                <p className="para">
                  {errors.status && "Password is required*"}
                </p>
              </Col>
            </Row>


            <Row className="firstRow">




            </Row>

            {/*mapping newly created data */}


            <Row className="first">
              <Col md="4">

                <label for="product name">Product Name</label>

                {/* <select {...register("productName", { required: true })} className="select">
                  {productsData.map((e) =>
             
            
                    <option value={e.productName} onClick={(e) => getTax(e)}>{e.productName}</option>
                    )}
                  </select> */}
                <Controller
                  as={Select}
                  name="productName"
                  options={mappedProducts}
                  isMulti
                  control={control}
                  render={(p) => {
                    const { ref, onChange, value } = p.field
                    return (
                      <Select
                        inputRef={ref}
                        classNamePrefix="addl-class"
                        options={mappedProducts}
                        
                        value={mappedProducts.find(e => (e.value === value))}
                        onChange={val => setProducts(val)}

                      />
                    )
                  }}
                />



                <p className="para">
                  {errors.to && "this field can't be empty*"}
                </p>
              </Col>

              <Col md="4">
                <label for="Quantity">Quantity</label>
                <input
                  type="number"
                  {...register("quantity", {
                    required: true

                  })}
                  placeholder="enter quantity"
                />
                <p className="para">
                  {errors.to && "this field can't be empty*"}
                </p>
              </Col>

              <Col md="4">
                <label for="description">Description</label>
                <input
                  type="text"
                  {...register('Description', {
                    required: true

                  })}
                />
                <p className="para">
                  {errors.to && "this field can't be empty*"}
                </p>
              </Col>

              <Col md="4">
                <label for="price">Price</label>
                <input
                  type="number"
                  {...register('unitPrice', {
                    required: true

                  })}
                />
                <p className="para">
                  {errors.to && "this field can't be empty*"}
                </p>
              </Col>


              <Col md="4">
                <label for="Total">Total</label>
                <input
                  type="number"
                  {...register('total', {
                    required: true

                  })}
                />
                <p className="para">
                  {errors.to && "this field can't be empty*"}
                </p>
              </Col>

            




            </Row>












            <Row className="firstRow">
              <Col className="button-column"  >
                <button className="addnew-btn" onClick={() => addItems()}><i class="far fa-plus-square"> Add More </i></button>
              </Col>

            </Row>



            <Row className="firstRow">
              <Col className="button-column"  >
                <button className="submit-btn" >SUBMIT</button>
              </Col>

            </Row>

          </form>
        </div>
      </Container>

    </>
  )
}

export default Form


















//invoice without dropdown
import React, { useState, useEffect } from "react";
import { useForm, Controller } from "react-hook-form";
import Datepicker from './Datepicker';
import { Container, Row, Col } from 'reactstrap';
import DatePicker from "react-datepicker";
import "react-datepicker/dist/react-datepicker.css";
import { useSelector, useDispatch } from 'react-redux'
import { postInvoiceData } from './../Redux/Action/FormAction'
import { CompanyData } from './../Redux/Action/ToCompanies'
import { postLoginData } from "./../../src/Redux/Action/LoginAction";
import {
  BrowserRouter as Router,
  Switch,
  Route,
  Link,
  Redirect
} from "react-router-dom";
import { getAllInvoices } from "../Redux/Action/allInvoiceAction";

const Form = ({ history, location }) => {



  const [state1, setstate1] = useState({
    "from": '',
    "to": '',
    "createdBy": '',
    "items": {
      "productName": '',
      "quantity": '',
      "description": '',
      "unitPrice": '',
      "total": ''
    },
    "dueDate": '',
    "status": ''
  })

  const [addMore, setAddmore] = useState({
    items: [
      {
        "productName": "",
        "quantity": "",
        "description": "",
        "unitPrice": "",
        "total": "",
      },
    ],
  });

  const addItems = (e) => {
   
    // setAddmore((prevState) => ({
      
    //   //here hName was newCon
    //   items: [
    //      ...prevState.items,
    //     {
    //       "productName":"",
    //     "quantity": "",
    //     "description": "",
    //     "unitPrice": "",
    //     "total": "",
    //     },
    //   ],
    // }));



     setAddmore({
      items: [
        {
          "productName": "",
          "quantity": "",
          "description": "",
          "unitPrice": "",
          "total": "",
        },
      ],
    })

    
  };





  const state = useSelector(state => state)
  const dispatch = useDispatch()
  const { control, register, handleSubmit, formState: { errors } } = useForm();


  useEffect(() => {
    dispatch(CompanyData());
    // dispatch(postLoginData())
    console.log(location, "user reg data in form")
    console.log(selectedOrg, "sel org")
    console.log(selectedOrg, "gggggggggggggggggggggggggggggggggggggggggggggg")
    // console.log(selOrg,"local s data")
  }, [])
  // const onSubmit = (invoicedata) => dispatch(postInvoiceData


  //   (invoicedata));
  const getValues = (invoicedata) => {
    setstate1({
      "from": invoicedata.from,
      "to": invoicedata.to,
      "createdBy": invoicedata.createdBy,
      "items": {
        "productName": invoicedata.ProductName,
        "quantity": invoicedata.quantity,
        "description": invoicedata.Description,
        "unitPrice": invoicedata.unitPrice,
        "total": invoicedata.total
      },
      "dueDate": invoicedata.dueDate,
      "status": invoicedata.status
    })

    setTimeout(() => {

    }, 500);


  }


  const onSubmit = (invoicedata) => {
    //  getValues(invoicedata)
    dispatch(postInvoiceData(invoicedata, history))
    console.log(invoicedata,"invouice data items")

    // setTimeout(() => {

    //   history.push("/download")
    // }, 1000);
    // 
    // console.log(object)

    // console.log("dispatched data",state.companyId.to);

  }


  const logoutFun = () => {
    localStorage.clear();
    history.push("/");
  }

// for organisation
  const selectedOrg = JSON.parse(localStorage.getItem("selected_company"))



  const allInvoice = () =>{
    history.push("/download")
  }






  return (

    <>
      <div className="container-area">
        <div className="header">
          <div className="navbar">
            <div className="left-side">
            <i class="fas fa-user-alt"></i>
              <div className="all-invoice-btn">
                <button onClick={()=>allInvoice()} className="addnew-btn">Show Invoices</button>
              </div>
            </div>
            <div className="right-side">
              <div className="logout-btn">
              <button className="addnew-btn" onClick={logoutFun}><i class="far fa-plus-square"> logout </i></button>

              </div>
            </div>
          </div>
        </div>
      </div>
      <Container>
       
        <div className="outer">
       
          {/* {JSON.stringify(state1)} */}
          <form onSubmit={handleSubmit(onSubmit)} className="form-data">

           
            <Row>
              <div className="btn-head1">
          <div>
            <h5 className="top-head"><b >INVOICE MANAGEMENT</b></h5>
            </div> 

            <div className="log-btn"> 
               
              </div> 
                </div>
                </Row>
          

            
            <Row className="firstRow">
              <Col md="4">
                <label for="status">From</label>
                <select {...register("from")} className="select1">

                  {selectedOrg.map((e) => (
                    <option value={e.id}>{e.companyName}</option>
                  ))}

                  {/* <option value="606c540c3ac87255eb43225d">Tcs</option>
                  <option value="606c540c3ac87255eb43225d">Wipro</option> */}
                </select>
              </Col>
              <Col md="4">
                <label for="Created By">Created By </label>
                <input
                  type="text"
                  {...register('createdBy', {

                  })}
                />

              </Col>
              <Col md="4">
                <label for="To">To</label>
                <select {...register("to")} className="select">

                  {state.companyId.to.map((e) =>
                    <option value={e.id}>{e.name}</option>
                  )}

                </select>
              </Col>
            </Row>

            <Row className="firstRow">
              <Col md="3">
                <label for="Notes">Notes</label>
                <input
                  type="text"
                  {...register('Notes', {

                  })}
                />
              </Col>


              {/* <Col md="3">
                <label for="product name">Product Name</label>
                <input
                  type="text"
                  {...register('ProductName', {
                    required: true


                  })}


                />
                <p className="para">
                  {errors.ProductName && "Password is required*"}
                </p>


              </Col>

              <Col md="3">
                <label for="Quantity">Quantity</label>
                <input
                  type="text"
                  {...register('quantity', {
                    required: true


                  })}
                />
                <p className="para">
                  {errors.quantity && "Password is required*"}
                </p>

              </Col> */}

              <Col md="3">
                <label for="dueDate">Due Date</label>
                {/* <Controller name="due_date" control={control} defaultValue={null}
                  render={
                    ({onChange, value})=><DatePicker   onChange={onChange} selected={value}
                    
                    placeholderText="select date" />

                  }
                  />  */}


                {<Controller name="dueDate" control={control} defaultValue={null}
                  render={
                    (p) => {
                      console.log(`onChange, value`, p.fields)
                      return <DatePicker selected={p.field.value}
                        placeholderText="select date   " onChange={p.field.onChange} />

                    }

                  }
                />
                }


              </Col>
            </Row>


            {/* <Row className="firstRow">
              <Col md="4">
                <label for="description">Description</label>
                <input
                  type="text"
                  {...register('Description', {

                  })}
                />
              </Col>

              <Col md="4">
                <label for="price">Price</label>
                <input
                  type="number"
                  {...register('unitPrice', {
                    required: true

                  })}
                />

                <p className="para">
                  {errors.unitPrice && "Password is required*"}
                </p>

              </Col>


              <Col md="4">
                <label for="Total">Total</label>
                <input
                  type="number"
                  {...register('total', {
                    required:true

                  })}

                  
                />
                  <p className="para">
                      {errors.total && "Password is required*"}
                    </p>
                
                </Col> */}

              {/* <Col md="3">
                <label for="mode of payment">Mode of Payment</label>
                <select {...register("Payment of Method")} className="select">
                  <option value="UPI">UPI</option>
                  <option value="Net banking">Net Banking</option>
                  <option value="Debit Card">Debit Card</option>
                </select>
              </Col> */}

            {/* </Row> */}
            {/* 
            <Row className="first">
              <Col md="3">
                <label for="gst number">GST Number</label>
                <input type="text" onChange={change} name="gstNumber" value={initial.gstNumber} />
              </Col>
              <Col md="3">
                <label for="tax">Tax</label>
                <input type="text" onChange={change} name="tax" value={initial.tax} /></Col>
             
              <Col md="3">
                <label for="notes">Notes</label>
                <input type="text" onChange={change} name="notes" value={initial.notes} />
              </Col>
            </Row> */}
            <Row className="firstRow">

            


            </Row>
              
         {/*mapping newly created data */}

{addMore.items.map((e) => (
              <Row className="first">
                <Col md="4">
                  <label for="product name">Product Name</label>
                  <input
                    type="text"
                    {...register("ProductName", {
                      
                    })}
                  />{" "}
                </Col>

                <Col md="4">
                <label for="Quantity">Quantity</label>
                <input
                  type="number"
                  {...register("quantity", {
                  
                  })}
                  placeholder="enter quantity"
                />
              </Col>

                  <Col md="4">
                <label for="description">Description</label>
                <input
                  type="text"
                  {...register('Description', {

                  })}
                />
              </Col>

              <Col md="4">
                <label for="price">Price</label>
                <input
                  type="number"
                  {...register('unitPrice', {

                  })}
                />
              </Col>


              <Col md="4">
                <label for="Total">Total</label>
                <input
                  type="number"
                  {...register('total', {

                  })}
                /></Col>   

<Col md="4">
                <label for="status">Status</label>
                <select {...register("status",{required:true})} className="select">
                  <option value="pending">Pending</option>
                  <option value="underReview">Under Review</option>
                  <option value="approved">Approved</option>
                </select>

                <p className="para">
                      {errors.status && "Password is required*"}
                    </p>
              </Col>




              </Row>
            ))}









          

            <Row className="firstRow">
              <Col className="button-column"  >
                <button className="addnew-btn" onClick={() => addItems()}><i class="far fa-plus-square"> Add More </i></button>
              </Col>

            </Row>



            <Row className="firstRow">
              <Col className="button-column"  >
                <button className="submit-btn" >SUBMIT</button>
              </Col>

            </Row>

          </form>
        </div>
      </Container>

    </>
  )
}

export default Form














***********updated invoice

import React, { useState, useEffect } from "react";
import { useForm, Controller } from "react-hook-form";
import Datepicker from "./Datepicker";
import { Container, Row, Col } from "reactstrap";
import DatePicker from "react-datepicker";
import "react-datepicker/dist/react-datepicker.css";
import { useSelector, useDispatch } from "react-redux";
import { postInvoiceData } from "./../Redux/Action/FormAction";
import { CompanyData } from "./../Redux/Action/ToCompanies";
import { postLoginData } from "./../../src/Redux/Action/LoginAction";
import {
  BrowserRouter as Router,
  Switch,
  Route,
  Link,
  Redirect,
} from "react-router-dom";
import Select from "react-select";

import { productData } from "./../Redux/Action/ProductAction";
import { getAllByText } from "@testing-library/dom";

const Form = ({ history, location }) => {
  const [state1, setstate1] = useState({
    from: "",
    to: "",
    createdBy: "",
    items: {
      productName: "",
      quantity: "",
      description: "",
      unitPrice: "",
      total: "",
    },
    dueDate: "",
    status: "",
  });




  //add More buttonn
  const [addMore, setAddmore] = useState({
    items: [
      {
        productName: "",
        quantity: "",
        description: "",
        unitPrice: "",

      },
    ],
  });

  const addItems = (e) => {
    setAddmore((prevState) => ({

      //here hName was newCon
      items: [
        ...prevState.items,
        {
          "productName": "",
          "quantity": "",
          "description": "",
          "unitPrice": "",

        },
      ],
    }));

  };

  const state = useSelector((state) => state);
  const dispatch = useDispatch();
  const {
    control,
    register,
    handleSubmit,
    formState: { errors },
  } = useForm();

  useEffect(() => {
    dispatch(CompanyData());
    // dispatch(postLoginData())
    dispatch(productData());
    console.log(location, "user reg data in form");
    console.log(selectedOrg, "sel org");
    console.log(selectedOrg, "gggggggggggggggggggggggggggggggggggggggggggggg");
    // console.log(selOrg,"local s data")
  }, []);
  // const onSubmit = (invoicedata) => dispatch(postInvoiceData

  //   (invoicedata));
  const getValues = (invoicedata) => {
    setstate1({
      from: invoicedata.from,
      to: invoicedata.to,
      createdBy: invoicedata.createdBy,
      items: {
        productName: invoicedata.ProductName,
        quantity: invoicedata.quantity,
        description: invoicedata.Description,
        unitPrice: invoicedata.unitPrice,
        total: invoicedata.total,
      },
      dueDate: invoicedata.dueDate,
      status: invoicedata.status,
    });

    setTimeout(() => { }, 500);
  };

  const onSubmit = (invoicedata) => {

    const body = {
      ...invoicedata,
      productName: mappedProducts.map(e => e.value),

    }

    //  getValues(invoicedata)
    dispatch(postInvoiceData(invoicedata, history))
    console.log(invoicedata, "invoice data items");

    setTimeout(() => {

      history.push("/download")

    }, 1000);



    console.log("dispatched data", state.companyId.to);
  };

  const logoutFun = () => {
    localStorage.clear();
    history.push("/");
  };

  // for organisation
  const selectedOrg = JSON.parse(localStorage.getItem("selected_company"));

  const [pro, setProducts] = useState([]);
  const [tax, setTax] = useState({
    tax: "",
    category: "",
  });
  //used new use selector for for product data
  const productsData = useSelector((state) => state.products.Product);

  const mappedProducts = productsData.map((e) => ({
    label: e.productName,
    value: e.id,
    color: "#00B8D9",
    category: e.category,
    tax: e.tax,
  }));
  console.log(mappedProducts);

  const allInvoice = () => {
    history.push("/download");
  };

  const [total, setTotal] = useState({
    quantity: "",
    unitPrice: "",
    total: "",
  });

  const setQuan = (e) => {
    setTotal({ ...total, [e.target.name]: e.target.value });
  };

  const setTotalVal = () => {
    setTotal({
      total: total.quantity * total.unitPrice,
    });
  };

  return (
    <>
      <div className="container-area">
        <div className="header">
          <div className="navbar">
            <div className="left-side">
              <i class="fas fa-user-alt"></i>
              <div className="all-invoice-btn">
                <button onClick={() => allInvoice()} className="addnew-btn">
                  Show Invoices
                </button>
              </div>
            </div>
            <div className="right-side">
              <div className="logout-btn">
                <button className="addnew-btn" onClick={logoutFun}>
                  Logout <i class="fas fa-sign-out-alt"></i>
                </button>
              </div>
            </div>
          </div>
        </div>
      </div>

      <Container>
        <div className="outer">
          {/* {JSON.stringify(productsData,"product-data")} */}

          <form onSubmit={handleSubmit(onSubmit)} className="form-data">
            <Row>
              <div className="btn-head1">
                <div>
                  <h5 className="top-head">
                    <b>INVOICE MANAGEMENT</b>
                  </h5>
                  {/* {productsData.map((e) => (e.productName)

                  )} */}
                </div>

                {/* <div className="log-btn">
                  <button className="addnew-btn" onClick={logoutFun}>
                    <i class="far fa-plus-square"> logout </i>
                  </button>
                </div> */}
              </div>
            </Row>

            <Row className="firstRow">
              <Col md="4">
                <label for="status">From</label>
                <select {...register("from")} className="select1">
                  {selectedOrg.map((e) => (
                    <option value={e.id}>{e.companyName}</option>
                  ))}
                </select>
              </Col>
              <Col md="4">
                <label for="Created By">Created By </label>
                <input
                  type="text"
                  {...register("createdBy", {
                    required: true,
                  })}
                />

                <p className="para">
                  {errors.createdBy && "this field can't be empty*"}
                </p>
              </Col>
              <Col md="4">
                <label for="To">To</label>
                <select
                  {...register("to", { required: true })}
                  className="select"
                >
                  {state.companyId.to.map((e) => (
                    <option value={e.id}>{e.name}</option>
                  ))}
                </select>
                <p className="para">
                  {errors.to && "this field can't be empty*"}
                </p>
              </Col>
            </Row>

            <Row className="">
              <Col md="4">
                <label for="Notes">Notes</label>
                <input type="text" {...register("Notes", {})} />
                <p className="para">
                  {errors.Notes && "this field can't be empty*"}
                </p>
              </Col>

              <Col md="4  ">
                <label for="dueDate">Due Date</label>
                {/* <Controller name="due_date" control={control} defaultValue={null}
                  render={
                    ({onChange, value})=><DatePicker   onChange={onChange} selected={value}
                    
                    placeholderText="select date" />

                  }
                  />  */}

                {
                  <Controller
                    name="dueDate"
                    control={control}
                    defaultValue={null}
                    render={(p) => {
                      console.log(`onChange, value`, p.fields);
                      return (
                        <DatePicker
                          selected={p.field.value}
                          placeholderText="select date   "
                          onChange={p.field.onChange}
                          className="date-picker"
                        />
                      );
                    }}
                  />
                }
              </Col>

              <Col md="4">
                <label for="status">Status</label>
                <select
                  {...register("status", { required: true })}
                  className="select"
                >
                  <option value="pending">Pending</option>
                  <option value="underReview">Under Review</option>
                  <option value="approved">Approved</option>
                </select>

                <p className="para">
                  {errors.status && "Password is required*"}
                </p>
              </Col>
            </Row>

            <Row className=""></Row>

            {/*mapping newly created data */}
            {addMore.items.map((e, index) => (
              <Row className="first">
                {/* {JSON.stringify(pro,"tax vali state")} */}
                <Col md="4">
                  <label for="product name">Product Name</label>

                  {/* <select {...register("productName", { required: true })} className="select">
                  {productsData.map((e) =>
             
            
                    <option value={e.productName} onClick={(e) => getTax(e)}>{e.productName}</option>
                    )}
                  </select> */}
                  <Controller
                    as={Select}
                    name="productName"
                    options={mappedProducts}
                    isMulti
                    control={control}
                    render={(p) => {
                      const { ref, onChange, value } = p.field;
                      return (
                        <Select
                          inputRef={ref}
                          classNamePrefix="addl-class"
                          options={mappedProducts}
                          value={mappedProducts.find((e) => e.value === value)}
                          onChange={(val) => setProducts(val)}
                        />
                      );
                    }}
                  />

                  <p className="para">
                    {errors.to && "this field can't be empty*"}
                  </p>
                </Col>

                <Col md="4">
                  <label for="Quantity">Category</label>
                  <input
                    type="text"
                    value={pro.category}
                    placeholder="Category"
                    disabled
                  />
                </Col>

                <Col md="4">
                  <label for="Quantity">Tax</label>

                  <input type="text" value={pro.tax} placeholder="Tax" disabled />
                </Col>

                <Col md="4">
                  {/* {JSON.stringify(total)} */}
                  <label for="Quantity">Quantity</label>
                  <input
                    type="number"
                    name="quantity"
                    value={total.quantity}
                    {...register("quantity", {
                      required: true,
                    })}
                    onChange={setQuan}
                    placeholder="enter quantity"
                  />
                  <p className="para">
                    {errors.to && "this field can't be empty*"}
                  </p>
                </Col>

                <Col md="4">
                  <label for="description">Description</label>
                  <input
                    type="text"
                    {...register("Description", {
                      required: true,
                    })}
                    placeholder="Description"
                  />
                  <p className="para">
                    {errors.to && "this field can't be empty*"}
                  </p>
                </Col>

                <Col md="4">
                  <label for="price">Price</label>
                  <input
                    type="number"
                    name="unitPrice"
                    value={total.unitPrice}
                    {...register("unitPrice", {
                      required: true,
                    })}
                    onChange={(e) => {
                      setQuan(e);
                    }}
                  />
                  <p className="para">
                    {errors.to && "this field can't be empty*"}
                  </p>
                </Col>


              </Row>
            ))}
            <Row>


            <Col md="4">
              <label for="Total">Total</label>
              <input
                type="number"
                {...register("total", {
                  required: true,
                })}
                value={
                  ((parseFloat(total.unitPrice) || 0) *
                    (parseFloat(total.quantity) || 0)) * (1 + (0.01) * (parseFloat(pro.tax) || 0))
                }
              // onClick={}
              />
              <p className="para">
                {errors.to && "this field can't be empty*"}
              </p>
            </Col>
            </Row>


            <Row className="firstRow">
              <Col className="button-column">
                <button className="addnew-btn" onClick={() => addItems()}>
                  <i class="far fa-plus-square"> Add More </i>
                </button>
              </Col>
            </Row>

            <Row className="firstRow">
              <Col className="button-column">
                <button className="submit-btn">SUBMIT</button>
              </Col>
            </Row>
          </form>
        </div>
      </Container>
    </>
  );
};

export default Form;





 { moment("2021-03-31T18:30:00.000Z").format('DD/MM/YYYY')}












 <div>
        <meta charSet="UTF-8" />
        <meta httpEquiv="X-UA-Compatible" content="IE=edge" />
        <meta name="viewport" content="width=device-width, initial-scale=1.0" />
        <link
          href="https://fonts.googleapis.com/css2?family=Montserrat:wght@100;200;300;400;500;600;700;800;900&display=swap"
          rel="stylesheet"
        />
        <link
          rel="stylesheet"
          href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css"
        />
        <title>Invoice</title>
        <style
          dangerouslySetInnerHTML={{
            __html:
              '\n      body {\n        font-family: "Montserrat", sans-serif;\n        margin: 0;\n        padding: 0;\n        box-sizing: border-box;\n      }\n​\n      .bg-set {\n        background-image: url();\n        background-size: cover;\n      }\n    ',
          }}
        />
        <div className="bg-set">
          <div className="content" style={{ padding: "0px 10px" }}>
            <div className="title-head">
              <h1
                style={{
                  margin: "0px",
                  paddingTop: "21px",
                  textTransform: "uppercase",
                  color: "#085394",
                  fontSize: "70px",
                }}
              >
                invoice
              </h1>
              <div
                className="tittle"
                style={{ display: "flex", justifyContent: "space-between" }}
              >
                <p style={{ fontSize: "22px" }}>
                  From: {location.state.from.companyName} <br />
                  <br />
                </p>
                <p style={{ fontSize: "20px", textTransform: "uppercase" }}>
                  invoice # kmit-1234
                </p>
              </div>
            </div>
            {/*------bill---*/}
            <div
              className="section"
              style={{
                display: "flex",
                marginBottom: "42px",
                justifyContent: "space-between",
              }}
            >
              <div className="head">
                <h4
                  style={{
                    textTransform: "uppercase",
                    color: "#085394",
                    fontSize: "16px",
                    margin: "10px 0px",
                    fontWeight: 400,
                    lineHeight: "28px",
                  }}
                >
                  To: {location.state.to.companyName} <br />
                  {location.state.to.address}
                  <br />
                  {location.state.to.state}
                </h4>
              </div>
              <div className="head">
                <h4
                  style={{
                    textTransform: "uppercase",
                    color: "#085394",
                    fontSize: "16px",
                    margin: 0,
                    fontWeight: 400,
                  }}
                />
              </div>
              <div className="head" style={{ lineHeight: "33px" }}>
                <h4
                  style={{
                    textTransform: "uppercase",
                    color: "#085394",
                    fontSize: "16px",
                    fontWeight: 400,
                    margin: "7px 0px",
                  }}
                >
                  Invoice #
                </h4>
                <h4
                  style={{
                    textTransform: "uppercase",
                    color: "#085394",
                    fontSize: "16px",
                    margin: "7px 0px",
                    fontWeight: 400,
                  }}
                >
                  invoice date
                </h4>
                <h4
                  style={{
                    textTransform: "uppercase",
                    color: "#085394",
                    fontSize: "16px",
                    fontWeight: 400,
                    margin: "7px 0px",
                  }}
                >
                  status
                </h4>
                <h4
                  style={{
                    textTransform: "uppercase",
                    color: "#085394",
                    fontSize: "16px",
                    fontWeight: 400,
                    margin: "7px 0px",
                  }}
                >
                  Due date
                </h4>
              </div>
              <div className="head">
                <h4
                  style={{
                    textTransform: "uppercase",
                    fontWeight: 400,
                    margin: "1px 0px",
                  }}
                >
                  {location.state.Id}
                </h4>
                <p
                  style={{
                    textTransform: "uppercase",
                    fontWeight: 400,
                    margin: "1px 0px",
                  }}
                >
                  {location.state.to.createdAt}
                </p>
                <p
                  style={{
                    textTransform: "uppercase",
                    fontWeight: 400,
                    margin: "1px 0px",
                  }}
                >
                  {location.state.Status}
                </p>
                <p
                  style={{
                    textTransform: "uppercase",
                    fontWeight: 400,
                    margin: "1px 0px",
                  }}
                >
                  {location.state.DueDate}
                </p>
              </div>
            </div>
            {/*-----table---*/}
            <table
              style={{
                paddingTop: "40px",
                tableLayout: "fixed",
                width: "100%",
                borderSpacing: 0,
              }}
            >
              <thead>
                <tr>
                  <th
                    style={{
                      textTransform: "uppercase",
                      color: "#085394",
                      padding: "10px 20px",
                      fontSize: "21px",
                      textAlign: "start",
                      borderTop: "2px solid #83D0BF",
                      borderBottom: "2px solid #83D0BF",
                    }}
                  >
                    qty
                  </th>
                  <th
                    style={{
                      textTransform: "uppercase",
                      color: "#085394",
                      padding: "10px 20px",
                      fontSize: "21px",
                      textAlign: "start",
                      borderTop: "2px solid #83D0BF",
                      borderBottom: "2px solid #83D0BF",
                    }}
                  >
                    product
                  </th>
                  <th
                    style={{
                      textTransform: "uppercase",
                      color: "#085394",
                      padding: "10px 20px",
                      fontSize: "21px",
                      textAlign: "start",
                      borderTop: "2px solid #83D0BF",
                      borderBottom: "2px solid #83D0BF",
                    }}
                  >
                    description
                  </th>
                  <th
                    style={{
                      textTransform: "uppercase",
                      color: "#085394",
                      padding: "10px 20px",
                      fontSize: "21px",
                      textAlign: "left",
                      borderTop: "2px solid #83D0BF",
                      borderBottom: "2px solid #83D0BF",
                    }}
                  >
                    unit price
                  </th>
                </tr>
              </thead>
              <tbody>
                <tr>
                  <td style={{ textAlign: "start", padding: "11px 31px" }}>
                    {location.state.Quantity}
                  </td>
                  <td style={{ textAlign: "start", padding: "17px 21px" }}>
                    {location.state.Product}
                  </td>
                  <td style={{ textAlign: "start", padding: "17px 21px" }}>
                    {location.state.Description}
                  </td>
                  <td style={{ textAlign: "left", paddingLeft: "57px" }}>
                    {location.state.Price}
                  </td>
                </tr>
                <tr>
                  <td style={{ borderTop: "2px solid #83D0BF" }} />
                  <td style={{ borderTop: "2px solid #83D0BF" }} />
                  <td
                    style={{
                      textTransform: "uppercase",
                      borderTop: "2px solid #83D0BF",
                      color: "#085394",
                      fontSize: "17px",
                      textAlign: "start",
                      padding: "10px 20px",
                      fontWeight: 700,
                    }}
                  >
                    Total
                  </td>
                  <td
                    style={{
                      textTransform: "uppercase",
                      borderTop: "2px solid #83D0BF",
                      color: "#085394",
                      fontSize: "17px",
                      padding: "10px 47px",
                      fontWeight: 700,
                    }}
                  >
                    ₹{location.state.Total}
                  </td>
                </tr>
              </tbody>
            </table>
            {/*-bottm--*/}
            <div className="head">
              <h4
                style={{
                  color: "#085394",
                  fontSize: "20px",
                  margin: 0,
                  fontWeight: 400,
                }}
              >
                Terms &amp; Conditions
              </h4>
            </div>
          </div>
        </div>
        ​
      </div>
















       quantity:{location.state.Quantity.map((e)=><li>{e.quantity}</li>)}
   Total:{location.state.Total.map((e)=>e.total)}




   company registration*******************

   import React,{useState} from "react";
import { useForm, Controller } from "react-hook-form";
import { useDispatch, useSelector } from "react-redux";

import { Container, Row, Col } from "reactstrap";
import { postCompanyData } from "./../../Redux/Action/CompanyAction";
import { Back, InputFirst, InputS } from "./CompanyRegStyle.js";
import { ToastContainer, toast } from "react-toastify";
import "react-toastify/dist/ReactToastify.css";
const [phone, setphone] = useState([])

const ComapnyReg = ({ history }) => {
  const notifyuser = () => toast.success("Success");
  const state = useSelector((state) => state.state);
  const dispatch = useDispatch();
  const {
    control,
    register,
    handleSubmit,
    formState: { errors },
  } = useForm();
  const onSubmit = (companydata) => {
   const body={ ...companydata,
    contact: `+${phone}`
  
  
  
  }}


    console.log(companydata,"company data************")
    dispatch(postCompanyData(companydata));
  }



  const signin = () => {
    history.push('/login')
  }

  
  
  return (
    <>
      <Container>
        <Back>
          <form onSubmit={handleSubmit(onSubmit)} className="form-data">
            <h5 className="top-head1">
              <div className="hover-effect">
                <ul className="options">
                  <li className="list-one"><b>Sign Up</b></li>
                  <li className="list1" onClick={signin}><b>Sign In</b></li>
                </ul>
              </div>
            </h5>
            <Row>
              <Col md="5">
                <Row className="first">
                  <Col md="12">
                    <label for="Company name">company Name</label>

                    <InputFirst
                      placeholder="KeyMouseit"
                      type="text"
                      autoComplete="off"
                      {...register("companyName", {
                        required: true,

                      })}
                    />
                    <p className="para">
                      {errors.companyName && "Company Name is required*"}
                    </p>
                  </Col>
                </Row>

                <Row>
                  <Col md="12">
                    <label for="Web Address">Web Address</label>

                    <InputS
                      placeholder="KeyMouseit"
                      type="text"
                      autoComplete="off"
                      {...register("webAddress", {
                        required: true,

                      })}
                    />
                    <p className="para">
                      {errors.webAddress && "Web Address is required*"}
                    </p>
                  </Col>
                </Row>

                <Row>
                <Col md="6">
                    <label for="number">Contact</label>
                    <PhoneInput
                      country={'in'}
                      value={state.phone}
                      onChange={phone => setphone(phone)}


                    />
                  </Col>

                  <Col md="6">
                    <label for="email">Email</label>

                    <InputS
                      placeholder="abc@example.com"
                      type="text"
                      autoComplete="off"
                      {...register("email", {
                        required: true,
                      })}
                    />
                    <div className="para">
                      <p>{errors.email && "Email is required"}</p>
                    </div>
                  </Col>
                </Row>

                <Row>
                  <Col md="6">
                    <label for="Address">Address</label>

                    <InputS
                      placeholder="Address"
                      type="text"
                      autoComplete="off"
                      {...register("address", {
                        required: true,
                      })}
                    />
                    <p className="para">
                      {errors.address && "Please provide a valid Address*"}
                    </p>
                  </Col>

                  <Col md="6">
                    <label for="City">City</label>

                    <InputS
                      placeholder="city"
                      type="text"
                      autoComplete="off"
                      {...register("city", {
                        required: true,
                      })}
                    />
                    <p className="para">
                      {errors.city && "Provide a valid City"}
                    </p>
                  </Col>
                </Row>

                <Row>
                  <Col md="6">
                    <label for="State">State</label>

                    <InputS
                      placeholder="State"
                      type="text"
                      autoComplete="off"
                      {...register("state", {
                        required: true,
                      })}
                    />
                    <p className="para">
                      {errors.city && "Please provide a state*"}
                    </p>
                  </Col>

                  <Col md="6">
                    <label for="status">Country</label>
                    <select {...register("country")} className="select">
                      <option value="India">India</option>
                      <option value="Australia">Austrlia</option>
                      <option value="USA">USA</option>
                    </select>
                  </Col>
                </Row>

                <Row>
                  <Col md="6">
                    <label for="Password">Password</label>

                    <InputS
                      placeholder="password"
                      type="password"
                      autoComplete="off"
                      {...register("password", {
                        required: true,
                      })}
                    />
                    <p className="para">
                      {errors.password && "Password is required"}
                    </p>
                  </Col>

                  <Col md="6">
                    <label for="ConfirmPassword">Confirm password</label>

                    <InputS
                      placeholder="Confirm Password"
                      type="password"
                      autoComplete="off"
                      {...register("confirmPassword", {
                        required: true,
                      })}
                    />
                    <p className="para">
                      {errors.password && "Password is required"}
                    </p>
                  </Col>
                </Row>
                <Row>
                  <Col>
                    <InputS
                      type="checkbox"
                      autoComplete="off"
                      className="checkbox-para"
                      {...register("checkbox", {
                        required: true,
                      })}
                    />
                    <label for="checkbox" className="checkbox-para">
                      I've Read agree with Terms of service and our privacy
                      policy
                    </label>
                    <p className="para">
                      {errors.checkbox && "You must agree before submitting."}
                    </p>
                  </Col>
                </Row>

                <Row>
                  <Col>
                    <button className="btn-sub">
                      <div className="outer-icon">
                        <img
                          className="arrow-image"
                          src={
                            require("./../../Images/next_arrow@3x.png")
                              .default
                          }
                          alt="Header Img"
                          srcset=""
                        ></img>
                      </div>
                    </button>
                  </Col>
                </Row>
              </Col>

              <Col md="7">
                <img
                  src={
                    require("./../../Images/login_character.png")
                      .default
                  }
                  alt="Header Img"
                  srcset=""
                ></img>
              </Col>
            </Row>
          </form>
        </Back>
      </Container>
      <ToastContainer />
    </>
  );
};

export default ComapnyReg;